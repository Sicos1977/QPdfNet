using System;
using System.Collections.Generic;

namespace QPdfNet.Output;

/// <summary>
///     A class to help parse the output that is generated by QPDF
/// </summary>
public static class Helper
{
    /// <summary>
    ///     Parses the information that is returned by the <see cref="Job.ShowPages"/> method
    ///     possibly in combination with <see cref="Job.WithImages"/>
    /// </summary>
    /// <param name="output"></param>
    /// <returns></returns>
    public static List<PageInfo> ShowPagesParser(string? output)
    {
        var result = new List<PageInfo>();

        if (output == null)
            return result;

        PageInfo? pageInfo = null;

        var lines = output.Split(new[] { '\n' }, StringSplitOptions.RemoveEmptyEntries);

        foreach (var line in lines)
        {
            var temp = line.Trim();
            
            if (temp.StartsWith("page"))
            {
                if (pageInfo != null)
                    result.Add(pageInfo);

                pageInfo = new PageInfo();
                temp = temp[5..];
                var parts = temp.Split(new[] { ':' }, StringSplitOptions.RemoveEmptyEntries);
                pageInfo.PageNumber = Convert.ToInt32(parts[0]);
            }
            else if (temp.StartsWith("content"))
            {
                pageInfo ??= new PageInfo();
                pageInfo.HasContent = true;
            }
            else if (temp.StartsWith("/Image"))
            {
                pageInfo ??= new PageInfo();
                pageInfo.Images ??= new List<Image>();
                temp = temp.Replace("/Image", string.Empty);
                var parts = temp.Split(new[] { ':' }, StringSplitOptions.RemoveEmptyEntries);
                var id = parts[0].Trim();
                parts = parts[1].Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                parts = parts[1].Split(new[] { 'x' }, StringSplitOptions.RemoveEmptyEntries);
                var width = parts[0].Trim();
                var height = parts[1].Trim();
                pageInfo.Images.Add(new Image(int.Parse(id), int.Parse(width), int.Parse(height)));
            }
        }

        if (pageInfo != null)
            result.Add(pageInfo);

        return result;
    }
}

